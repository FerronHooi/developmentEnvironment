{
  "name": "${localWorkspaceFolderBasename} Dev Environment",
  // Build configuration - using Dockerfile for comprehensive environment
  "build": {
    "dockerfile": "Dockerfile",
    "context": "..",
    "args": {
      // These can be overridden via .env or environment variables
      "PYTHON_VERSION": "${localEnv:PYTHON_VERSION:3.11}",
      "NODE_VERSION": "${localEnv:NODE_VERSION:18}",
      "VARIANT": "bullseye"
    }
  },
  // VS Code specific configurations
  "customizations": {
    "vscode": {
      // Settings that apply to the container
      "settings": {
        // === Python Settings ===
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.linting.enabled": true,
        "python.linting.pylintEnabled": true,
        "python.formatting.provider": "black",
        "python.terminal.activateEnvironment": true,
        // === Jupyter/Databricks Notebook Settings ===
        "jupyter.interactiveWindow.cellMarker.codeRegex": "^# COMMAND ----------|^# Databricks notebook source|^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
        "jupyter.interactiveWindow.cellMarker.default": "# COMMAND ----------",
        // === Editor Settings ===
        "editor.formatOnSave": true,
        "editor.rulers": [
          80,
          120
        ],
        "editor.minimap.enabled": true,
        "files.autoSave": "afterDelay",
        "files.autoSaveDelay": 1000,
        // === Terminal Settings ===
        "terminal.integrated.defaultProfile.linux": "bash",
        "terminal.integrated.profiles.linux": {
          "bash": {
            "path": "bash"
          },
          "zsh": {
            "path": "zsh"
          },
          "pwsh": {
            "path": "pwsh"
          }
        },
        // === Git Settings ===
        "git.autofetch": true,
        "git.enableSmartCommit": true,
        "git.confirmSync": false,
        "git.autoRepositoryDetection": true,
        "git.ignoreRebaseWarning": true,
        // === Files to Exclude ===
        "files.exclude": {
          "**/__pycache__": true,
          "**/*.pyc": true,
          "**/node_modules": false,
          "**/.pytest_cache": true,
          "**/.venv": false,
          "**/venv": false,
          "**/.env.local": false
        },
        // === Databricks Settings (using env vars) ===
        "databricks.host": "${env:DATABRICKS_HOST}",
        "databricks.token": "${env:DATABRICKS_TOKEN}",
        // === Azure Settings (using env vars) ===
        "azure.tenant": "${env:AZURE_TENANT_ID}",
        "azure.subscriptionId": "${env:AZURE_SUBSCRIPTION_ID}"
      },
      // Extensions to install in the container (64 total)
      // MCP (Model Context Protocol) Server Configurations
      "mcp": {
        "servers": {
          "context7": {
            "command": "npx",
            "args": ["-y", "@upstash/context7-mcp@latest"],
            "env": {}
          },
          "filesystem": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-filesystem"],
            "env": {
              "FILESYSTEM_ROOT": "/workspace"
            }
          },
          "memory": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-memory"],
            "env": {}
          },
          "github": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-github"],
            "env": {
              "GITHUB_TOKEN": "${localEnv:GITHUB_TOKEN:}"
            }
          },
          "gitlab": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-gitlab"],
            "env": {
              "GITLAB_TOKEN": "${localEnv:GITLAB_TOKEN:}",
              "GITLAB_URL": "${localEnv:GITLAB_URL:https://gitlab.com}"
            }
          },
          "azure": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-azure"],
            "env": {
              "AZURE_SUBSCRIPTION_ID": "${localEnv:AZURE_SUBSCRIPTION_ID:}",
              "AZURE_CLIENT_ID": "${localEnv:AZURE_CLIENT_ID:}",
              "AZURE_CLIENT_SECRET": "${localEnv:AZURE_CLIENT_SECRET:}",
              "AZURE_TENANT_ID": "${localEnv:AZURE_TENANT_ID:}"
            }
          },
          "postgres": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-postgres"],
            "env": {
              "DATABASE_URL": "${localEnv:DATABASE_URL:}"
            }
          },
          "sqlite": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-sqlite"],
            "env": {
              "SQLITE_DB_PATH": "${localWorkspaceFolder}/data/database.db"
            }
          },
          "playwright": {
            "command": "npx",
            "args": ["-y", "@microsoft/mcp-server-playwright"],
            "env": {}
          },
          "puppeteer": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-puppeteer"],
            "env": {}
          },
          "fetch": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-fetch"],
            "env": {}
          }
        }
      },
      "extensions": [
        // === Data & Analytics Extensions (14) ===
        "analysis-services.tmdl",
        "databricks.databricks",
        "databricks.sqltools-databricks-driver",
        "dvirtz.parquet-viewer",
        "fabric.vscode-fabric",
        "gerhardbrueckl.fabricstudio",
        "gerhardbrueckl.onelake-vscode",
        "gerhardbrueckl.powerbi-vscode",
        "gerhardbrueckl.powerbi-vscode-extensionpack",
        "grapecity.gc-excelviewer",
        "jianfajun.dax-language",
        "qwtel.sqlite-viewer",
        "randomfractalsinc.duckdb-sql-tools",
        "randomfractalsinc.vscode-data-table",
        // === Database & SQL Tools (1) ===
        "mtxr.sqltools",
        // === Python Development (4) ===
        "ms-python.debugpy",
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-python.vscode-python-envs",
        // === Jupyter & Notebooks (6) ===
        "ms-toolsai.datawrangler",
        "ms-toolsai.jupyter",
        "ms-toolsai.jupyter-keymap",
        "ms-toolsai.jupyter-renderers",
        "ms-toolsai.vscode-jupyter-cell-tags",
        "ms-toolsai.vscode-jupyter-slideshow",
        // === Azure & Cloud Development (7) ===
        "ms-azure-devops.azure-pipelines",
        "ms-azuretools.vscode-azure-github-copilot",
        "ms-azuretools.vscode-azure-mcp-server",
        "ms-azuretools.vscode-azureresourcegroups",
        "ms-azuretools.vscode-azurestorage",
        "ms-vscode.azure-repos",
        "upstash.context7-mcp",
        // === Docker & Containers (3) ===
        "ms-azuretools.vscode-containers",
        "ms-azuretools.vscode-docker",
        "ms-vscode-remote.remote-containers",
        // === Git & Version Control (7) ===
        "donjayamanne.githistory",
        "eamodio.gitlens",
        "github.remotehub",
        "mhutchie.git-graph",
        "michelemelluso.gitignore",
        "ms-vscode.remote-repositories",
        "shaharkazaz.git-merger",
        // === AI & Code Assistants (3) ===
        "anthropic.claude-code",
        "github.copilot",
        "github.copilot-chat",
        // === API Testing & Development (2) ===
        "postman.postman-for-vscode",
        "rangav.vscode-thunder-client",
        // === Editor Enhancements (12) ===
        "alefragnani.project-manager",
        "bierner.markdown-mermaid",
        "dineug.vuerd-vscode",
        "dionmunk.vscode-notes",
        "hediet.vscode-drawio",
        "janisdd.vscode-edit-csv",
        "oderwat.indent-rainbow",
        "redhat.vscode-yaml",
        "serkonda7.vscode-vba",
        "wayou.vscode-todo-highlight",
        "zainchen.json",
        // === JetBrains Theme & Keybindings (4) ===
        "asrepairs.jetbrains-version-control",
        "chadalen.vscode-jetbrains-icon-theme",
        "edwinsulaiman.jetbrains-rider-dark-theme",
        "isudox.vscode-jetbrains-keybindings",
        // === Terminal & PowerShell (2) ===
        "docter60.vscode-terminal-for-ubuntu",
        "ms-vscode.powershell",
        "DotJoshJohnson.xml"
      ]
    }
  },
  // Dev Container Features - Disabled since tools are installed in Dockerfile
  "features": {},
  // Environment variables - References to machine-specific values
  "remoteEnv": {
    // === Project Information ===
    "PROJECT_NAME": "${localWorkspaceFolderBasename}",
    "WORKSPACE_FOLDER": "${containerWorkspaceFolder}",
    // === Development Environment ===
    "ENVIRONMENT": "${localEnv:ENVIRONMENT:development}",
    "NODE_ENV": "${localEnv:NODE_ENV:development}",
    // === Python Settings ===
    "PYTHONDONTWRITEBYTECODE": "1",
    "PYTHONUNBUFFERED": "1",
    "PYTHONPATH": "${containerWorkspaceFolder}:${env:PYTHONPATH}",
    // === Azure/Databricks Credentials (from .env or system) ===
    "DATABRICKS_HOST": "${localEnv:DATABRICKS_HOST:}",
    "DATABRICKS_TOKEN": "${localEnv:DATABRICKS_TOKEN:}",
    "AZURE_TENANT_ID": "${localEnv:AZURE_TENANT_ID:}",
    "AZURE_CLIENT_ID": "${localEnv:AZURE_CLIENT_ID:}",
    "AZURE_CLIENT_SECRET": "${localEnv:AZURE_CLIENT_SECRET:}",
    "AZURE_SUBSCRIPTION_ID": "${localEnv:AZURE_SUBSCRIPTION_ID:}",
    // === API Endpoints (from .env) ===
    "API_BASE_URL": "${localEnv:API_BASE_URL:}",
    "DATABASE_URL": "${localEnv:DATABASE_URL:}",
    // === Feature Flags ===
    "ENABLE_GPU": "${localEnv:ENABLE_GPU:false}",
    "ENABLE_JUPYTER": "${localEnv:ENABLE_JUPYTER:true}",
    "ENABLE_DATABRICKS": "${localEnv:ENABLE_DATABRICKS:true}",
    // === MCP Server Credentials (from .env or system) ===
    "GITHUB_TOKEN": "${localEnv:GITHUB_TOKEN:}",
    "GITLAB_TOKEN": "${localEnv:GITLAB_TOKEN:}",
    "GITLAB_URL": "${localEnv:GITLAB_URL:https://gitlab.com}"
  },
  // Mount points for credentials and configurations
  "mounts": [
    // === Credential Mounts (read-only for security) ===
    "source=${localEnv:HOME}${localEnv:USERPROFILE}/.azure,target=/home/vscode/.azure,type=bind,consistency=cached",
    "source=${localEnv:HOME}${localEnv:USERPROFILE}/.databricks,target=/home/vscode/.databricks,type=bind,consistency=cached",
    "source=${localEnv:HOME}${localEnv:USERPROFILE}/.ssh,target=/home/vscode/.ssh,type=bind,readonly",
    "source=${localEnv:HOME}${localEnv:USERPROFILE}/.gitconfig,target=/home/vscode/.gitconfig,type=bind,readonly",
    // === Cache Volumes for Performance ===
    "source=vscode-extensions,target=/home/vscode/.vscode-server/extensions,type=volume",
    "source=pip-cache,target=/home/vscode/.cache/pip,type=volume",
    "source=npm-cache,target=/home/vscode/.npm,type=volume"
    // === Optional: Shared data directory ===
    // "source=${localEnv:DATA_PATH:${localWorkspaceFolder}/data},target=/data,type=bind,consistency=cached"
  ],
  // Port forwarding configuration
  "forwardPorts": [],
  "appPort": [
    "3000:3000", // React/Node apps
    "5000:5000", // Flask/FastAPI
    "8000:8000", // Django
    "8080:8080", // Alternative web server
    "8888:8888" // Jupyter
  ],
  "portsAttributes": {
    "3000": {
      "label": "Web App",
      "onAutoForward": "notify",
      "elevateIfNeeded": false
    },
    "5000": {
      "label": "API Server",
      "onAutoForward": "notify"
    },
    "8000": {
      "label": "Django Server",
      "onAutoForward": "notify"
    },
    "8080": {
      "label": "Alt Server",
      "onAutoForward": "silent"
    },
    "8888": {
      "label": "Jupyter",
      "onAutoForward": "openBrowser",
      "protocol": "https"
    }
  },
  // Commands to run at different stages
  "initializeCommand": "echo 'Initializing container for ${localWorkspaceFolderBasename}...'",
  // Container run arguments
  "runArgs": [
    "--cap-add=SYS_PTRACE",
    "--security-opt",
    "seccomp=unconfined"
  ],
  // Post-create command - runs once when container is created
  "postCreateCommand": "bash .devcontainer/postCreateCommand.sh || echo \"Post-create script completed\"",
  // Post-start command - runs every time container starts
  "postStartCommand": "echo \"Container started at $(date)\"",
  // Post-attach command - runs after VS Code attaches (reset git to clean state)
  "postAttachCommand": "cd /workspace && git reset --hard HEAD 2>/dev/null && git clean -fd 2>/dev/null && echo 'VS Code attached - repository reset to clean state' || echo 'VS Code attached'",
  // Update content command - for updating dependencies
  "updateContentCommand": "bash .devcontainer/updateDependencies.sh 2>/dev/null || echo 'No update script'",
  // Container user
  "remoteUser": "vscode",
  // Keep container running after VS Code closes
  "shutdownAction": "stopContainer",
  // Wait for post-create command to finish
  "waitFor": "postCreateCommand",
  // Workspace settings
  "workspaceFolder": "/workspace",
  "workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached"
}